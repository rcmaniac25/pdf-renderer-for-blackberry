--Revision Used: 132---

TODO:
Make sure that ROP is being used correctly.

Find out how static final treats Objects (Strings are known). Adjust code accordingly (such as next todo).

Determine if CCITTFaxDecoder.java can use static final instead of simply static

It seems almost like CalGreyScale likes to have a blue-tint associated with it, figure out how to correct this when converting images (or maybe just use the native grey colorspace)

implement the "Graphics" implementation of PDFGraphics (one idea is to store all drawing operations (since they are line/vector type operations, write them to an SVG, load them up and draw the SVG. Floating point operations, partial pixel drawing, scaling, Image drawing, etc. is all taken care of. The only thing is it will probably be slow).
	Use quality, so if quality is high for Graphics object, use SVG/OpenVG/OpenGL/etc. to draw, for low quality round the points and draw with normal Graphics object.
	Note in OS 6.0 support for OpenVG has been added, this is basically a OpenGL-like, Graphics-using-float system. Release notes states it adds support for fill and stroke elements in SVG and it seems to support them itself so make sure that the SVG renderer supports these elements in the proper version and that the fastest implementation takes priority.
	If in OS 5.0 support then use OpenGL, take a look at GLUT|ES to see how fonts are drawn.

Finish FilePicker
-Make sure that dialog always uses full size
-Make sure that file-size field is displayed
-Implement menu
--Implement properties
-Implement popup
-For thumbnail mode, adjust how focus, drawing, and interaction are handled (basically subdivide it)
-Test

Figure out a method of using the fastest possible renderer available for the device. So the renderer is run on 4.5, it simply uses GraphicsInternal as the backend renderer. 7.0 with OpenGL support available? Use OpenVG 1.1. Dev passes in a GL1.1 object, use that. etc. Leave GraphicsInternal as a lowest-common-denominator for rendering. Maybe do a real-time benchmark and sort the renderers based on time.

Figure out how to handle large PDFs. As of right now it will get out of memory exceptions.

Try to get Geometry.isFilled to properly handle bézier curves properly
Use preprocessor to remove "debug" code
Rewrite StandardDecrypter so it works properly with BlackBerry's crypto classes, handles error properly, and update the documentation to reflect changes and explain what the class is doing ("<cipher name>[_<keyBitLength>[_<blockBitLength>[_<numberOfRounds>]]][/<mode>[/<padding>]]")
See what can be done with NativeFont, if OCR can be done or if Geometry should have a special function only for NativeFont.
Update TODOs in various classes

FunctionType4:
-Make sure that "cvi" and "truncate" actually processes like it is specified (check .class file)
-Implement "cvr"
-Double check "ifelse" to make sure that it will execute correctly
-Get "copy" working (seems like they tried and failed)
-Implement "parse" function
-Implement "doFunction" function
-Implement "popBoolean" function
-Implement "pushBoolean" function
-Implement "popDouble" function
-Implement "pushDouble" function
-Implement "popExpression" function
-Implement "pushExpression" function
-Implement "popLong" function
-Implement "pushLong" function
-Implement "popObject" function
-Implement "pushObject" function
-Implement "readPS" function
-Implement "Expression"

PDFAction: (see ISO32000_2008, section 12.6)
-Determine manner of responding to parent app (listener, this way if the user clicks on something, the PDFRenderer can determine what action needs to be taken and respond back to the app. This also allows for app specific operations [such as displaying a file picker in a specific theme])
-Attempt to implement some other actions

Modify PDFViewer so that it supports Torch (Trackpad) and other 4.5/4.6/4.7 handsets (also check to make sure that if a CLICK event is used that it is not used on non-SurePress screens like the Torch)

Go through and make sure licenses and authors are noted and given credit to and update documentation so that it portains to BlackBerry PDF Renderer.

Preprocessor support
Add search functionality
Add text extraction

Figure out how to add support for text selection in PDF Viewer
Better compatibility for newer versions of PDF


Defines:
USE_FIXED32 (Uses Fixed32 instead of float if precision lost is not above a certain theshold, maybe a special class that can switch between them.)
NATIVE_SOFTREFERENCE (If SoftReference ever gets added natively this will ignore the built-in implementation).
FORCE_IMG_DECODE (When this is enabled, it will force PDFImage to decode an image using the slowest method possible [since the slowest method is the last resort], otherwise it will skip it [if it can't process it] and return a blank image)
//TODO: add more preprocessors


NOTES:
-Strings follow the guidelines listed in "http://docs.blackberry.com/en/developers/deliverables/3299/JDE_4.5_Fundamentals_Guide.pdf" which state not to use static final for Strings because then Strings need to be loaded multiple times and multiple instances of the same String exist.
-If accuracy becomes a problem with transforms, change AffineTransform to use doubles (like the original)
-PDFImage is drastically different in this (BlackBerry) version compared to the (J2SE) version. This is because BlackBerry doesn't have all the same image/color classes that J2SE has. The native image system is used to handle as much as possible.
-In the J2SE version of PDF Renderer, PDFImage will create the image in the native color format, then convert to RGB. In the BlackBerry PDFImage, it goes straight to RGB. This changes a couple things such as the greyscale converter, which was originally used to speed up conversion from greyscale to RGB, now used to create the RGB image.